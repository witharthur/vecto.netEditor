@page "/imageeditor"
@using System.ComponentModel
@using ImagePluginFramework.Models
@using ImagePluginFramework.Plugins
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http

<h3 class="editor-title">Simple Image Editor</h3>

<div class="editor-container">
    <!-- Controls Panel -->
    @if (!isApplied)
    {
        <div class="controls-panel">
            <div class="effect-checkboxes">
                <label><input type="checkbox" @bind="Effects.Blur" /> Blur</label>
                <label><input type="checkbox" @bind="Effects.Grayscale" /> Grayscale</label>
                <label><input type="checkbox" @bind="Effects.Invert" /> Invert</label>
            </div>

            <div class="slider-control">
                <label>Blur Radius: @Effects.Radius px</label>
                <input type="range" min="0" max="50" @bind="Effects.Radius" />
            </div>

            <div class="slider-control">
                <label>Border Radius: @Effects.BorderRadius px</label>
                <input type="range" min="0" max="50" @bind="Effects.BorderRadius" />
            </div>

            <div class="size-control">
                <label>Size (%):</label>
                <input type="number" min="10" max="300" @bind="Effects.Size" />
            </div>

            <div class="editor-buttons">
                <InputFile OnChange="OnFileSelected" class="file-input" />
                <button @onclick="ApplyEffects">Apply Changes</button>
            </div>
        </div>
    }

    <!-- Image Preview -->
    <div class="image-preview">
        @if (currentImage != null)
        {
            <img src="@currentImageDataUrl" alt="Preview" style="
                width:@Effects.Size%;
                height:@Effects.Size%;
                border:1px solid #ccc;
                display:block;
                filter:@GetCssFilters();
                border-radius:@Effects.BorderRadiusPx;
                transition: all 0.3s ease;
            " />
        }
        else
        {
            <div class="no-image-preview">
                <span>No Image Selected</span>
            </div>
        }
    </div>
</div>

<style>
.editor-container {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
}

.controls-panel {
    flex: 1;
    min-width: 250px;
    background: #f7f7f7;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.effect-checkboxes label {
    display: block;
    margin-bottom: 10px;
    font-weight: 500;
}

.slider-control, .size-control {
    margin: 15px 0;
}

input[type="range"] {
    width: 100%;
}

.editor-buttons {
    margin-top: 15px;
    display: flex;
    gap: 10px;
}

.editor-buttons button {
    background-color: #4CAF50;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
}

.editor-buttons button:hover {
    background-color: #45a049;
}

.image-preview {
    flex: 2;
    min-width: 300px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.no-image-preview {
    width: 100%;
    height: 300px;
    border: 1px solid #ccc;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 10px;
    background-color: #fafafa;
    color: #777;
    font-weight: 500;
}

.editor-title {
    margin-bottom: 20px;
}
</style>

@code {
    private string? currentImageDataUrl;
    private Image? currentImage;
    private Models.IImageEffect? myEffect;
    private IBrowserFile? selectedFile;
    private PluginManager pluginManager;
    private bool isApplied = false;

    private ImageEffects Effects = new ImageEffects();

    protected override async Task OnInitializedAsync()
    {
        pluginManager = new PluginManager(Http);
        await pluginManager.LoadPluginsAsync();
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        using var stream = selectedFile.OpenReadStream();
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        var bytes = ms.ToArray();

        currentImage = new Image
        {
            Name = selectedFile.Name,
            Width = 800,
            Height = 600,
            Data = bytes
        };

        currentImageDataUrl = $"data:image/png;base64,{Convert.ToBase64String(currentImage.Data)}";
    }

    private void ApplyEffects()
    {
        if (currentImage == null) return;

        if (Effects.Blur)
        {
            myEffect = pluginManager.CreateEffect("Blur", Effects.Radius.ToString());
            if (myEffect != null)
                currentImage.AddEffect(myEffect);
        }

        if (Effects.Grayscale)
        {
            myEffect = pluginManager.CreateEffect("Grayscale");
            if (myEffect != null)
                currentImage.AddEffect(myEffect);
        }

        if (Effects.Invert)
        {
            myEffect = pluginManager.CreateEffect("Invert");
            if (myEffect != null)
                currentImage.AddEffect(myEffect);
        }

        currentImage.ApplyEffects();
        currentImageDataUrl = $"data:image/png;base64,{Convert.ToBase64String(currentImage.Data)}";

        isApplied = true; // Hide controls
    }

    public class ImageEffects : INotifyPropertyChanged
    {
        private bool blur;
        public bool Blur { get => blur; set { blur = value; OnPropertyChanged(nameof(Blur)); } }

        private bool grayscale;
        public bool Grayscale { get => grayscale; set { grayscale = value; OnPropertyChanged(nameof(Grayscale)); } }

        private bool invert;
        public bool Invert { get => invert; set { invert = value; OnPropertyChanged(nameof(Invert)); } }

        private int radius = 0;
        public int Radius { get => radius; set { radius = value; OnPropertyChanged(nameof(Radius)); } }

        private int size = 100;
        public int Size { get => size; set { size = value; OnPropertyChanged(nameof(Size)); } }

        private int borderRadius = 0;
        public int BorderRadius
        {
            get => borderRadius;
            set { borderRadius = value; OnPropertyChanged(nameof(BorderRadius)); }
        }

        public string BorderRadiusPx => $"{BorderRadius}px";

        public event PropertyChangedEventHandler? PropertyChanged;
        protected void OnPropertyChanged(string name) =>
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }

    private string GetCssFilters()
    {
        var filters = "";
        if (Effects.Blur) filters += $"blur({Effects.Radius}px) ";
        if (Effects.Grayscale) filters += "grayscale(100%) ";
        if (Effects.Invert) filters += "invert(100%) ";
        return filters.Trim();
    }
}
